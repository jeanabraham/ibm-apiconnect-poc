/*
 * Financial
 * At a high-level: - To execute a transfer immediately, use frequency IMMEDIATE and set the transferDate to the current date (today) - To schedule a transfer to execute once at a specific date, use frequency ONCE and set the transferDate to the desired date. Transfer date must be greater than current date and must not exceed a configurable date such as 1 year from the current date. - To schedule a recurring transfer, use frequency other than IMMEDIATE or ONCE and specify one of openEnded flag, transferCount or endDate.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Money
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-06-15T15:11:11.329-04:00")
public class Money {
  @SerializedName("dollarAmount")
  private String dollarAmount = null;

  @SerializedName("currency")
  private Object currency = null;

  public Money dollarAmount(String dollarAmount) {
    this.dollarAmount = dollarAmount;
    return this;
  }

   /**
   * Dollar Amount
   * @return dollarAmount
  **/
  @ApiModelProperty(example = "null", value = "Dollar Amount")
  public String getDollarAmount() {
    return dollarAmount;
  }

  public void setDollarAmount(String dollarAmount) {
    this.dollarAmount = dollarAmount;
  }

  public Money currency(Object currency) {
    this.currency = currency;
    return this;
  }

   /**
   * ['USD' or 'CAD']: Currency
   * @return currency
  **/
  @ApiModelProperty(example = "null", value = "['USD' or 'CAD']: Currency")
  public Object getCurrency() {
    return currency;
  }

  public void setCurrency(Object currency) {
    this.currency = currency;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Money money = (Money) o;
    return Objects.equals(this.dollarAmount, money.dollarAmount) &&
        Objects.equals(this.currency, money.currency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dollarAmount, currency);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Money {\n");
    
    sb.append("    dollarAmount: ").append(toIndentedString(dollarAmount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

